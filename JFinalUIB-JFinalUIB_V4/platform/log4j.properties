# 日志级别 https://github.com/dongcb678/JFinalUIB
#log4j.rootLogger=DEBUG, JDBC, webpage, console, fileDebug, fileInfo, fileError
log4j.rootLogger=DEBUG, webpage, console, fileDebug, fileInfo, fileError
log4j.rootLogger.encoding=UTF-8

log4j.logger.com.platform=DEBUG
log4j.logger.com.weixin=DEBUG
log4j.logger.com.jfinal=DEBUG

log4j.logger.org=WARN
log4j.logger.com=WARN
log4j.logger.com.alibaba.druid=WARN
log4j.logger.net=WARN
log4j.logger.javax=WARN
log4j.logger.oracle=WARN
log4j.logger.SYSTEM = INFO

#JDBC configure
#log4j.appender.JDBC.Threshold=INFO
#log4j.appender.JDBC=org.apache.log4j.jdbc.JDBCAppender
#log4j.appender.JDBC.driver=org.postgresql.Driver
#log4j.appender.JDBC.URL=jdbc:postgresql://127.0.0.1:5432/jfinaluibv4
#log4j.appender.JDBC.user=postgres
#log4j.appender.JDBC.password=678789
#log4j.appender.JDBC.layout=org.apache.log4j.PatternLayout
#log4j.appender.JDBC.sql=insert into pt_log4j(userid, username, classname, methodname, createtime, loglevel, msg) values('%X{userId}', '%X{userName}', '%C', '%M', '%d{yyyy-MM-dd HH:mm:ss}', '%p', '%m')

#CREATE TABLE pt_log4j (  
#ids serial NOT NULL, 
#userid character varying(32) ,--用户ID  
#username character varying(200) ,--用户姓名  
#classname character varying(500) ,--类名  
#methodname character varying(200), --方法名  
#createtime text ,--产生时间  
#loglevel character varying(20),--日志级别  
#msg text, --日志信息  
#constraint pt_log4j_pkey PRIMARY KEY (ids)
#) 

# 输出到控制台
log4j.appender.Threshold=DEBUG
log4j.appender.console=org.apache.log4j.ConsoleAppender
#log4j.appender.console.encoding=UTF-8
log4j.appender.console.layout=org.apache.log4j.PatternLayout
log4j.appender.console.layout.ConversionPattern=%n%-d{yyyy-MM-dd HH:mm:ss}%n [%X{userIP}] [%X{userId}] [%X{userName}] [%p]-[Thread: %t]-[%C.%M()]: %m%n

# 输出到web页面
log4j.appender.webpage=com.platform.servlet.Log4jAppender
log4j.appender.webpage.encoding=UTF-8
log4j.appender.webpage.Append=true
log4j.appender.webpage.Threshold=DEBUG
log4j.appender.webpage.layout=org.apache.log4j.PatternLayout
log4j.appender.webpage.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss}%n [%X{userIP}] [%X{userId}] [%X{userName}] %p [%c] - %m%n

# 输出到文件 debug
# ${catalina.home}/logs
log4j.appender.fileDebug=org.apache.log4j.RollingFileAppender
log4j.appender.fileDebug.encoding=UTF-8
log4j.appender.fileDebug.Append=true
log4j.appender.fileDebug.Threshold=DEBUG
log4j.appender.fileDebug.File=logs/JfinalUIB-V3/debug.log
log4j.appender.fileDebug.MaxFileSize=10MB
log4j.appender.fileDebug.MaxBackupIndex=1000
log4j.appender.fileDebug.layout=org.apache.log4j.PatternLayout
log4j.appender.fileDebug.layout.ConversionPattern=%-d{yyyy-MM-dd HH:mm:ss.SSS} [%X{userIP}] [%X{userId}] [%X{userName}] %p [%t] <%F [%L] - %M> <%m> %X{traceId}%n

# 输出到文件 info
log4j.appender.fileInfo=org.apache.log4j.RollingFileAppender
log4j.appender.fileInfo.encoding=UTF-8
log4j.appender.fileInfo.Append=true
log4j.appender.fileInfo.Threshold=INFO
log4j.appender.fileInfo.File=logs/JfinalUIB-V3/info.log
log4j.appender.fileInfo.MaxFileSize=10MB
log4j.appender.fileInfo.MaxBackupIndex=500
log4j.appender.fileInfo.layout=org.apache.log4j.PatternLayout
log4j.appender.fileInfo.layout.ConversionPattern=%-d{yyyy-MM-dd HH:mm:ss.SSS} [%X{userIP}] [%X{userId}] [%X{userName}] %p [%t] <%F [%L] - %M> <%m>%n

# 输出到文件 error
log4j.appender.fileError=org.apache.log4j.RollingFileAppender
log4j.appender.fileError.encoding=UTF-8
log4j.appender.fileError.Append=true
log4j.appender.fileError.Threshold=ERROR
log4j.appender.fileError.File=logs/JfinalUIB-V3/error.log
log4j.appender.fileError.MaxFileSize=10MB
log4j.appender.fileError.MaxBackupIndex=100
log4j.appender.fileError.layout=org.apache.log4j.PatternLayout
log4j.appender.fileError.layout.ConversionPattern=%-d{yyyy-MM-dd HH:mm:ss.SSS} [%X{userIP}] [%X{userId}] [%X{userName}] %p [%t] <%l> %m%n

# ConversionPattern参数的格式含义 
# 格式名 含义 
# %c 输出日志信息所属的类的全名 
# %d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy-MM-dd HH:mm:ss }，输出类似：2002-10-18- 22：10：28 
# %f 输出日志信息所属的类的类名 
# %l 输出日志事件的发生位置，即输出日志信息的语句处于它所在的类的第几行 
# %m 输出代码中指定的信息，如log(message)中的message 
# %n 输出一个回车换行符，Windows平台为“rn”，Unix平台为“n” 
# %p 输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL。如果是调用debug()输出的，则为DEBUG，依此类推 
# %r 输出自应用启动到输出该日志信息所耗费的毫秒数 
# %t 输出产生该日志事件的线程名